
//Carlos S치nchez/Marco MArtinez/Oscar Perira
//En principio este codigo es un ejemplo de la librearia "pulsesensor"
//Muestra la frecuencia cardiaca por minuto ademas de numero de pulsaciones por 10 seg.
//Al usarse en una esp32 se deben de modificar los valores de entrada anal칩gica (de 12 a 8 bits)!
//al final este codigo cambio para ser un reloj con varias aplicaciones 

//se incluye esta librearia para poder utilizarla con este editor de texto 
#include <Arduino.h>
//display librerias ,tambien son usadas para la comunicaci칩n i2c
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
//control de esp32 (uso de wifi)
#include <WiFi.h>
#include <PubSubClient.h>
//libreria para el sensor infrarojo
#include <Adafruit_MLX90614.h>
//librera para usar el mpu
#include "MPU9250.h"


//objeto para usar el sensor infrarrojo
Adafruit_MLX90614 mlx = Adafruit_MLX90614();

//objeto para usar el mpu
MPU9250 IMU(Wire,0x68);


//datos para el display
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


//PAgina en la que nos encontramos
int pagina = 0;
//variables para controlar los botones
float millisBoton2 = 0;
float millisBoton = 0;
//constantes de la se침al de los botones
const int boton = 33;
const int boton2 = 32;

//para controlar hora y fecha
String myTime = "",date="";

//datos para conectarse con el docker
const char *mqtt_server = "ioticos.org";
const int mqtt_port = 1883;
const char *mqtt_user = "HBl4yo2cQMm2X8Q";
const char *mqtt_pass = "HKkLKuhlqek0n8t";
const char *root_topic_subscribe = "7QMilCVp673SeUt/entrada";
const char *root_topic_publish = "7QMilCVp673SeUt/salida";

//Datos para conectarse a la red wifi
const char* ssid = "Ubee9D27-2.4G";
const char* password =  "5C68F99D27";
long lastMsg=0;
WiFiClient espClient;
PubSubClient client(espClient);
char msg[50];
long count=0;

//variable para controlar la imagen que se muestre
String imagen = "0";

//Mensaje que se manda desde la pagina y se mostrara en el display
String mensaje = "No hay mensajes .-.";

//arreglos para guardar temperaturas
float arregloAmbiente[5];
float arregloObjeto[5];
//limites de temperatura 
float inferior=17;
float superior=28;

//limites de temperatura alerta objeto
float inferiorObjeto = 30;
float superiorObjeto = 37.5;

//movimiento del oponente
String move = "";


//imagenes que se mustran en la pantalla
const unsigned char mapa2 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe0, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x87, 0xf1, 0xdf, 0x80, 0x03, 0xff, 0x80, 0xff, 0xef, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xfe, 0x19, 0xf9, 0xdc, 0x0e, 0x0c, 0x0e, 0x38, 0x3f, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xd8, 0x73, 0xf3, 0x90, 0x3e, 0x06, 0x07, 0xfc, 0x1e, 0x00, 0xfc, 0x00, 0x7c, 0x7f, 0xff, 0xff, 
	0xb8, 0x67, 0xc7, 0x80, 0xfb, 0x00, 0xf0, 0x00, 0x38, 0x0f, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 
	0x90, 0xc7, 0x0f, 0x03, 0x00, 0x40, 0x03, 0xff, 0xc0, 0x1c, 0x00, 0x70, 0x7f, 0xff, 0xff, 0xff, 
	0x90, 0xc0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x03, 0xf8, 0x01, 0xff, 0xff, 0xff, 
	0xc0, 0x73, 0xf8, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xf8, 0xf0, 0x00, 0x38, 0x00, 0x7f, 0xff, 
	0xe0, 0x3f, 0xc0, 0x0e, 0x00, 0x07, 0x63, 0x80, 0x70, 0x00, 0xff, 0xf8, 0x7f, 0xff, 0xe0, 0xff, 
	0xf0, 0x00, 0x00, 0x38, 0xc0, 0x7d, 0x8c, 0x00, 0x01, 0x02, 0x40, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xfe, 0x00, 0x0c, 0x23, 0x03, 0xfb, 0x90, 0xe3, 0xf8, 0x01, 0x9e, 0x80, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xc0, 0x3c, 0x60, 0x0f, 0xfb, 0x21, 0xf1, 0x0e, 0x3f, 0x88, 0x88, 0x8f, 0xff, 0xff, 0xff, 
	0xf0, 0x0c, 0x00, 0x00, 0x3f, 0xf8, 0x21, 0xf8, 0xe3, 0x80, 0x62, 0x12, 0x41, 0xff, 0xff, 0xff, 
	0xe3, 0xc3, 0x80, 0x00, 0x70, 0x1c, 0x30, 0xfc, 0x7b, 0x87, 0x9c, 0x9a, 0x73, 0x3f, 0xff, 0xff, 
	0xe3, 0xf1, 0xc0, 0x00, 0x6c, 0x23, 0xcc, 0x3c, 0x2b, 0xc0, 0xce, 0x59, 0xde, 0x07, 0xff, 0xff, 
	0xe3, 0xf9, 0xc1, 0x00, 0x64, 0xc4, 0x91, 0x0e, 0x13, 0xde, 0x4e, 0x9c, 0x9c, 0x89, 0xff, 0xff, 
	0xf3, 0xf9, 0xe0, 0x80, 0x71, 0xe2, 0x1e, 0x43, 0x67, 0xbf, 0xbf, 0x78, 0x8d, 0x22, 0x7f, 0xff, 
	0xf8, 0xc3, 0x60, 0x01, 0x1f, 0x07, 0x86, 0x31, 0x8f, 0x3f, 0x02, 0xf8, 0x03, 0x24, 0x3f, 0xff, 
	0xc0, 0x18, 0xc0, 0x02, 0x67, 0x80, 0x10, 0x60, 0xf8, 0x00, 0xf3, 0xf8, 0x41, 0x89, 0x3f, 0xff, 
	0xfc, 0x00, 0x01, 0x01, 0x93, 0x33, 0xf0, 0x23, 0xc7, 0x03, 0xfc, 0xf8, 0x60, 0xa5, 0x3f, 0xff, 
	0xfe, 0x00, 0x00, 0x46, 0xcb, 0x88, 0x00, 0x0f, 0xfc, 0x00, 0x1f, 0x38, 0x60, 0xed, 0x3f, 0xff, 
	0xff, 0xc0, 0x03, 0xd2, 0x4b, 0x80, 0x60, 0x1f, 0xfe, 0x02, 0x1f, 0x00, 0x60, 0xa5, 0x3f, 0xff, 
	0xfe, 0x00, 0x00, 0x44, 0x9b, 0x39, 0xf8, 0x23, 0xc7, 0x87, 0xf8, 0xf8, 0x60, 0xa5, 0x3f, 0xff, 
	0xf8, 0x01, 0x80, 0x03, 0x27, 0x8e, 0x00, 0x40, 0xf8, 0x00, 0x71, 0xf8, 0x41, 0xad, 0xbf, 0xff, 
	0xfc, 0x7e, 0x40, 0x00, 0xcf, 0xff, 0xc3, 0x39, 0x8f, 0x3f, 0x83, 0x78, 0x03, 0x26, 0x7f, 0xff, 
	0xf1, 0x81, 0xe0, 0x80, 0x3c, 0x63, 0x0e, 0x63, 0x67, 0x99, 0x9b, 0x3c, 0x9d, 0x90, 0xff, 0xff, 
	0xf3, 0xf9, 0xe0, 0x80, 0x73, 0x64, 0x19, 0x0e, 0x1b, 0xde, 0x6e, 0xde, 0x06, 0x43, 0xff, 0xff, 
	0xe3, 0xf9, 0xc0, 0x00, 0x64, 0x01, 0x84, 0x38, 0x2b, 0xc0, 0xce, 0x59, 0x05, 0x0f, 0xff, 0xff, 
	0xe3, 0xf1, 0xc0, 0x00, 0x73, 0x86, 0x38, 0x7c, 0x7b, 0xc7, 0x9c, 0x9a, 0x48, 0x7f, 0xff, 0xff, 
	0xe1, 0xc3, 0x00, 0x00, 0x3f, 0xf8, 0x30, 0xfc, 0x73, 0x80, 0x66, 0x19, 0x23, 0xff, 0xff, 0xff, 
	0xf8, 0x08, 0x0c, 0x20, 0x1f, 0xfb, 0xb1, 0xf8, 0x8e, 0x3f, 0xc8, 0x4c, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xc0, 0x3c, 0x22, 0x07, 0xfb, 0x90, 0xf3, 0xf8, 0x00, 0xce, 0x41, 0xff, 0xff, 0xff, 0xff, 
	0xfc, 0x00, 0x00, 0x30, 0xc0, 0xfd, 0x8c, 0x01, 0x80, 0x81, 0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf0, 0x0f, 0x80, 0x0c, 0x00, 0x0f, 0x63, 0xc0, 0x38, 0x01, 0xff, 0xc0, 0x3f, 0xe0, 0x00, 0x01, 
	0xe0, 0x3f, 0xf0, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xf8, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xc0, 0x70, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0xfc, 0x07, 0xff, 0xff, 0xff, 
	0xc8, 0x60, 0x1f, 0x00, 0x00, 0x30, 0x01, 0xff, 0xc0, 0x1e, 0x00, 0xf0, 0x7f, 0xff, 0xff, 0xff, 
	0xd8, 0x67, 0xc7, 0x80, 0xf9, 0xc0, 0x3c, 0x00, 0x38, 0x07, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
	0xd8, 0x73, 0xf1, 0xc0, 0x3f, 0x01, 0x81, 0xfe, 0x1f, 0x00, 0x38, 0x01, 0xff, 0xff, 0xff, 0xff, 
	0xfe, 0x39, 0xf9, 0xcc, 0x0f, 0x06, 0x0f, 0x9c, 0x1f, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x0e, 0x38, 0xcf, 0x00, 0x03, 0xff, 0xe0, 0x7f, 0xe7, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xc1, 0xf8, 0xdf, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0x03, 0xdf, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


const unsigned char mapa1 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xee, 0x07, 0x1f, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc3, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x8f, 0xf8, 0xff, 0xe7, 0xc0, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x1f, 0xff, 
	0xff, 0xff, 0xff, 0xfd, 0xff, 0xef, 0xff, 0xef, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xf9, 0xd8, 0xe0, 0x7f, 0x80, 0x00, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xc7, 0xfb, 0x0f, 0xff, 0xef, 0xb0, 0x70, 0x7f, 0xc0, 0x00, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0x3f, 0xfe, 0x9f, 0xff, 0xff, 0xe0, 0x30, 0x1f, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf0, 0x7f, 0xfd, 0xff, 0xff, 0x00, 0x00, 0x3c, 0x01, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf3, 0xff, 0xfd, 0xff, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xf7, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf9, 0xff, 0xff, 0xdf, 0xff, 0xff, 0x03, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x43, 0xff, 0xff, 0xfc, 0x0f, 0xe1, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 
	0xff, 0xfd, 0x4a, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xf8, 0x7f, 0xf8, 0x00, 0x00, 0x0f, 0xff, 
	0xff, 0xfe, 0x7f, 0x7f, 0xff, 0xff, 0x80, 0x03, 0xff, 0xf0, 0x7f, 0xfe, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xbf, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0x80, 0x1f, 0xfc, 0x00, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xbf, 0x7f, 0xf7, 0xc0, 0x00, 0x07, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xdf, 0x3f, 0xbf, 0xfb, 0xc3, 0x00, 0x00, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xe8, 0x7f, 0xcf, 0xfc, 0xe3, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xd1, 0xff, 0xff, 0xfe, 0x79, 0xc0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0x3f, 0xc0, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xdf, 0xff, 0x1f, 0xff, 0x0f, 0xe1, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xef, 0xef, 0xe3, 0xc0, 0x07, 0xf1, 0xff, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xf6, 0x7f, 0xfc, 0x70, 0x03, 0xfc, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0x8f, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xff, 0xff, 0x1e, 0x00, 0x7f, 0x7f, 0x80, 0x1f, 0xff, 0xff, 0xfb, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7e, 0x00, 0x3f, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xe0, 0x03, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7c, 0x00, 0x3e, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0x00, 0x0f, 0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0x80, 0x03, 0xf0, 0x1f, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0x80, 0x00, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


unsigned char mapa0 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 
	0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 
	0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 
	0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
	0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x7f, 0xf8, 0x0f, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x81, 0x80, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x01, 0xf8, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x3f, 0xc0, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x01, 0xfe, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x20, 0x10, 0x00, 0x00, 0x41, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc7, 0x00, 0x00, 0x20, 0x14, 0x00, 0x00, 0xe3, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xcf, 0x80, 0x00, 0x30, 0x2e, 0x00, 0x01, 0xf3, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xdf, 0xe1, 0x04, 0x30, 0x3e, 0x20, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x87, 0x78, 0x3e, 0x71, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xfc, 0x3f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfc, 0x3f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x17, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x2c, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x0d, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x06, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x01, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x00, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0x00, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x02, 0x00, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0e, 0x00, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xde, 0x00, 0x00, 0x1c, 0x00, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x78, 0x00, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xe0, 0x00, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xf8, 0x00, 0x03, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

//////////////funciones////////////
//funci칩n que nos conecta a wifi
void setup_wifi(){
	// Nos conectamos a nuestra red Wifi
	Serial.println();
	Serial.print(" iot Conectando a ssid: ");
	Serial.println(ssid);

	WiFi.begin(ssid, password);

	while (WiFi.status() != WL_CONNECTED) {
		Serial.print(".");
	}
  

	Serial.println("");
	Serial.println("Conectado a red WiFi!");
	Serial.println("Direcci칩n IP: ");
	Serial.println(WiFi.localIP());
}




//funci칩n usada para conectarse al docker
void reconnect() {

	while (!client.connected()) {
		Serial.print("Intentando conexi칩n Mqtt...");
		// Creamos un cliente ID
		String clientId = "IOTICOS_H_W_" ;
		clientId += String(random(0xffff), HEX);
		// Intentamos conectar
		if (client.connect(clientId.c_str(),mqtt_user,mqtt_pass)) {
			Serial.println("Conectado!");
			// Nos suscribimos
			if(client.subscribe(root_topic_subscribe)){
        		Serial.println("Suscripcion ok");
      }else{
        Serial.println("fallo Suscripcii칩n");
      }
		} else {
			Serial.print("fall칩 :( con error -> ");
			Serial.print(client.state());
			Serial.println(" Intentamos de nuevo en 5 segundos");
		}
	}
}

//funci칩n usada al recibir un mensaje
//al llegar un mensaje se iguala a la variable que corresponde segun su prefijo
void callback(char* topic, byte* payload, unsigned int length){
	String incoming = "";
	Serial.print("Mensaje recibido desde -> ");
	Serial.print(topic);
	Serial.println("");
	for (int i = 0; i < length; i++) {
		incoming += (char)payload[i];
	}
	incoming.trim();

    if(incoming[0] == 't'){//tirmpo
		incoming[0] = ' ';
    	myTime = incoming;
  	}else if(incoming[0] == 'd'){//fecha
    	incoming[0] = ' ';
    	date = incoming;
  	}else if(incoming[0] == 'i'){//selecci칩n imagen
    	imagen = incoming[1];
  	}else if(incoming[0] == 'm'){//mensaje de texto
		incoming[0] = ' ';
    	mensaje = incoming;
  	}else if(incoming[0] == 'p' && incoming[1] == 'm'){ //movimiento del adversario(no se usa)
		incoming[0] = ' ';
		incoming[1] = ' ';
		move = incoming;
  	}


	//este fragmento enciende el led 2(azul) por los botones de la pagina 
	if(incoming == "0"){
		digitalWrite(BUILTIN_LED,LOW);
		Serial.println("\n led apagado");	
	}else if(incoming == "1"){
		digitalWrite(BUILTIN_LED,HIGH);
		Serial.println("\n led prendido");	
	}	
	

	Serial.println("Mensaje -> " + incoming);

}
//dibuja la grafica de las temperaturas del arreglo 
void dibuja(float arreglo[]){

	float auxMapeado[5];
	for(int i =0;i<5;i++){
		auxMapeado[i] = map(arreglo[i],inferior,superior,1,47);
	}
	display.clearDisplay();
	display.setTextSize(1);
	display.setTextColor(WHITE);
	//los primeros tres para metros no se cambian ya que son la posicion de las barras y su ancho 
    display.fillRect(5,16,20,auxMapeado[0],WHITE);
	display.fillRect(30,16,20,auxMapeado[1],WHITE);
	display.fillRect(55,16,20,auxMapeado[2],WHITE);
	display.fillRect(80,16,20,auxMapeado[3],WHITE);
	display.fillRect(105,16,20,auxMapeado[4],WHITE);
	display.setCursor(5,5);
	display.print("Temperatura:  ");
	display.print(arreglo[4] );

    display.display();
}
//agrega una nueva temperatura a la cola y elimina la ultima 
void agregarTemperaturaCola(float temp){
	for (int i = 0;i<4;i++){
		arregloAmbiente[i]=arregloAmbiente[i+1];
	}
	arregloAmbiente[4]=temp;
	String str = "g"+String(temp);
	str.toCharArray(msg,25);
	client.publish(root_topic_publish,msg);	  
	
}
//////////////////terminan las funciones////////////
void setup() {
 
  //pinMode(LED13,OUTPUT);         // pin that will blink to your heartbeat!
	Serial.begin(115200);        // Set's up Serial Communication at certain speed.
	if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    	Serial.println(F("SSD1306 allocation failed"));
    	for(;;); // Don't proceed, loop forever
  	}
	//se despliega la pantalla de inicio del reloj
  	display.clearDisplay();
  	display.setTextColor(WHITE);
  	display.setTextSize(3);
  	display.setCursor(35,10);
  	display.println("ITI");
  	display.setCursor(20,35);
  	display.print("WATCH");
  	display.display();

  	//wifi
  	setup_wifi();
  	client.setServer(mqtt_server, mqtt_port);
  	client.setCallback(callback);
  	pinMode(BUILTIN_LED,OUTPUT);
  	//Se ponen los pines de los botones en modo input
  	pinMode(boton,INPUT);
  	pinMode(boton2,INPUT);

  	//se inicia el objeto infrarrojo
  	mlx.begin(); 

  	//se inicia el objeto mpu
	IMU.begin();
  
}



// The Main Loop Function
void loop() {
	if (!client.connected()) {		//revisa que se este conectado a internet
		reconnect();
	}

  	if(millis() - lastMsg > 1000){		//se ejecuta cada segundo

    	//Se manda el mensaje 
		lastMsg = millis();
		if (client.connected()){		//si esta conectado manda un mensaje a la pagina para mantener 
			String str = "La cuenta es -> " ;	//activa la comunicaci칩n
			str.toCharArray(msg,25);
			client.publish(root_topic_publish,msg);	  
		}
		//este condicional sirve para mostrar en el display la pagina en la que nos encontramos 	
		if(pagina == 0){//reloj
    		display.clearDisplay();
    		display.setTextColor(WHITE);
    		display.setTextSize(1);
    		display.setCursor(65,0);
    		display.print(date);
    		display.setTextSize(2);
    		display.fillRect(0,20,127,63,WHITE);
    		display.setTextColor(BLACK);
    		display.setCursor(10,35);
    		display.print(myTime);
    		display.display();

    	}else if(pagina == 1){//mensajes
    		display.clearDisplay();
    		display.setTextColor(WHITE);
    		display.setTextSize(1);
			display.setCursor(0,0);
			display.print("Mensajes");
			display.setCursor(2,25);
			display.print(mensaje);
    		display.display();
    	}else if(pagina == 2){//imagenes
    		display.clearDisplay();
    		if(imagen == "0")
    	    	display.drawBitmap(0,0,mapa0,128,64,WHITE);  
    	  	if(imagen == "1")
    	    	display.drawBitmap(0,0,mapa1,128,64,WHITE);
    	  	if(imagen == "2") 
    	    	display.drawBitmap(0,0,mapa2,128,64,WHITE);
    	  		display.display();
    		}else if(pagina == 5){//juego
    	    	IMU.readSensor();
		    	display.clearDisplay();
    	    	display.setTextColor(WHITE);
    	    	display.setTextSize(4);
    	    	display.setCursor(15,10);
		    	display.print("PONG");
				display.setCursor(0,45);
				display.setTextSize(1);
				display.print(move);
		    	//display.print(IMU.getMagX_uT());
		    	//display.print(IMU.getMagY_uT());

			//el prefijo pp es de pong pause, se pasa a entero para eliminar los decimales
			if((int)IMU.getMagX_uT() > 10){	
				String str = "pp"+(int)IMU.getMagX_uT();		
				str.toCharArray(msg,25);
				client.publish(root_topic_publish,msg);
			}else{
				String str = "pp"+String(0);		
				str.toCharArray(msg,25);
				client.publish(root_topic_publish,msg);
			}
			//el prefijo pp es de pong move
			String str = "pm"+String((int)IMU.getMagY_uT());		
			str.toCharArray(msg,25);
			client.publish(root_topic_publish,msg);

			display.display();
    	}else if(pagina == 3){//temperatura ambiente 
			agregarTemperaturaCola(mlx.readAmbientTempC()-9);
			dibuja(arregloAmbiente);
		}else if(pagina == 4){//temperatura de un objeto
			display.clearDisplay();
    		display.setTextColor(WHITE);
    		display.setTextSize(1);
    		display.setCursor(0,0);
    		display.println("Temperatura persona:");
			display.setCursor(5,30);
			display.setTextSize(2);
    		display.print(mlx.readObjectTempC());
			display.drawCircle(96,39,23,WHITE);
			display.drawLine(90,25,105,25,WHITE);
			display.drawLine(105,25,105,35,WHITE);
			display.drawLine(95,35,105,35,WHITE);
			display.drawLine(95,35,95,45,WHITE);
			display.drawLine(95,52,95,54,WHITE);

		    display.display();
		}  
	}

	client.loop();	
	if(millis() - millisBoton > 300){//acciones boton 1
    	if(digitalRead(boton) == HIGH){
	  		if(pagina == 1)
				mensaje = "No hay mensajes .-.";//se vacia la variable de mensajes 
      		if(pagina < 5){
        		pagina++;
      		}else{
        		pagina = 0;
      		}
    	}
    	millisBoton = millis();
	}
    if(millis() - millisBoton2 > 300){	//acciones boton 2
    	if(digitalRead(boton2) == HIGH){
	  		if(pagina == 1){
				display.clearDisplay();
      			display.setTextColor(WHITE);
      			display.setTextSize(1);
	  			display.setCursor(0,0);
	  			display.print("Mensajes");
				display.setCursor(60,0); 
				display.print("Confirmado!");
	  			display.setCursor(2,25);
	  			display.print(mensaje);
      			display.display();
				String str = "b1";
				str.toCharArray(msg,25);
				client.publish(root_topic_publish,msg);	  
				delay(400);			//Este delay no es realmente necesario , se puede omitir
	  		}else if(pagina == 4){//al detectar un objeto con temperatura ideal
		    	if(mlx.readObjectTempC()>inferiorObjeto && mlx.readObjectTempC()< superiorObjeto){
					display.clearDisplay();
      				display.setTextColor(WHITE);
      				display.setTextSize(1);
	  				display.setCursor(0,0);
					display.print("Temperatura ideal!");
					display.setCursor(5,30);
	    			display.setTextSize(2);
        			display.print(mlx.readObjectTempC());
					display.drawCircle(96,39,23,WHITE);
					display.drawLine(90,32,90,34,WHITE);
					display.drawLine(100,32,100,34,WHITE);
					display.drawLine(85,47,95,50,WHITE);
					display.drawLine(95,50,105,47,WHITE);
      				display.display();
		    	}else{
					display.clearDisplay();
      				display.setTextColor(WHITE);
      				display.setTextSize(1);
	  				display.setCursor(0,0);
					display.print("Temperatura peligrosa");
					display.setCursor(5,30);
	    			display.setTextSize(2);
        			display.print(mlx.readObjectTempC());
					display.drawTriangle(72,60,95,16,117,60,WHITE);
					display.drawLine(95,30,95,45,WHITE);
					display.drawLine(95,50,95,53,WHITE);
      				display.display();
				}
				String str = "o"+String(mlx.readObjectTempC());
				str.toCharArray(msg,25);
				client.publish(root_topic_publish,msg);	
				delay(2000);			//este delay no es realmente necesario
	  		}
    	}
    	millisBoton2 = millis();
	}
}
